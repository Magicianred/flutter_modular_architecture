// Mocks generated by Mockito 5.0.10 from annotations
// in feature_cubit/test/src/presentations/cubit/feature_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:feature_cubit/src/domain/entities/feature_cubit_entity.dart'
    as _i7;
import 'package:feature_cubit/src/domain/repositories/feature_cubit_repository.dart'
    as _i2;
import 'package:feature_cubit/src/domain/usecases/feature_cubit_usecases.dart'
    as _i4;
import 'package:fpdart/src/either.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared/src/errors/failures.dart' as _i6;
import 'package:shared/src/usecases/usecase_params.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeFeatureCubitRepository extends _i1.Fake
    implements _i2.FeatureCubitRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [FeatureCubitUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureCubitUseCase extends _i1.Mock
    implements _i4.FeatureCubitUseCase {
  MockFeatureCubitUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FeatureCubitRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeFeatureCubitRepository())
          as _i2.FeatureCubitRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.FeatureCubitEntity>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.FeatureCubitEntity>>.value(
                      _FakeEither<_i6.Failure, _i7.FeatureCubitEntity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.FeatureCubitEntity>>);
}
