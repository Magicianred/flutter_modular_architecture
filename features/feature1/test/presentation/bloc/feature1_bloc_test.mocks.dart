// Mocks generated by Mockito 5.0.10 from annotations
// in feature1/test/presentation/bloc/feature1_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:feature1/src/domain/entities/feature1_entity.dart' as _i7;
import 'package:feature1/src/domain/repositories/feature1_repository.dart'
    as _i2;
import 'package:feature1/src/domain/usecases/feature1_usecase.dart' as _i4;
import 'package:fpdart/src/either.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared/src/errors/failures.dart' as _i6;
import 'package:shared/src/usecases/usecase_params.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeFeature1Repository extends _i1.Fake
    implements _i2.Feature1Repository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [Feature1UseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeature1UseCase extends _i1.Mock implements _i4.Feature1UseCase {
  MockFeature1UseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Feature1Repository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeFeature1Repository()) as _i2.Feature1Repository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Feature1Entity>> call(
          _i8.NoParams? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.Feature1Entity>>.value(
                      _FakeEither<_i6.Failure, _i7.Feature1Entity>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Feature1Entity>>);
}
